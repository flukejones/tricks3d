<!--Header-->
<HTML>
<HEAD>
<TITLE>GPMega - Advanced Section - High Resolution Timing In Games</TITLE>
</HEAD>
<BODY BGCOLOR=#000000 TEXT=#FFFFFF LINK=#00FF00 VLINK=#00FF00 ALINK=#0000FF>
<!--End Header-->
<!--Advertiser-->
<CENTER>
<TABLE>
<TR>
<TD>
<A HREF="http://www.ugo.com/">
<IMG SRC="/GPMega/ugologo120.gif" BORDER=0 WIDTH=120 HEIGHT=60></A>
</TD>
<TD>
<IMG SRC="/GPMega/sponsored.gif" WIDTH=468 HEIGHT=10><br><br>
<SCRIPT LANGUAGE= "JavaScript">
<!--
var now = new Date();
var random_num = now.getSeconds();
document.write("<A HREF='http://www.ugo.net/RealMedia/ads/click_nx.cgi/www.perplexed.com/GPMega/advanced/ftime.htm/" + random_num + "/@Top'>");
document.write("<IMG SRC='http://www.ugo.net/RealMedia/ads/adstream_nx.cgi/www.perplexed.com/GPMega/advanced/ftime.htm/" + random_num + "/@Top' BORDER='0' WIDTH='468' HEIGHT='60'></A>");
//-->
</SCRIPT>
</TD>
</TR>
</TABLE>
</CENTER>
<!--End Advertiser-->
<!--Splitter-->
<BR>
<!--End Splitter-->
<!--Body-->
<FONT SIZE=2 FACE=Helvetica>
<STRONG>
<!--Top Navigation-->
<A NAME="top"></A>
<CENTER>
<TABLE WIDTH=75%>
   <TR VALIGN=MIDDLE>
   <TD ALIGN=LEFT>
      <IMG SRC="gradsplit2.jpg" WIDTH=100% HEIGHT=1><BR><BR>
      <A HREF="http://www.perplexed.com/GPMega/"><IMG SRC="logo.jpg" BORDER=0 ALT="Home" WIDTH=80 HEIGHT=47 ALIGN=CENTER></A>
      <FONT COLOR=#666666 FACE=HELVETICA SIZE=-1><I>
      This Article Is Taken From <A HREF="http://www.perplexed.com/GPMega/">The Game Programming MegaSite</A>, A Definitive Resource For Game Developers!
      </I></FONT><BR>
      <IMG SRC="gradsplit2.jpg" WIDTH=100% HEIGHT=1>
   </TD>
   </TR>
</TABLE>
</CENTER>
<BR><!--End Top Navigation-->
<!--Title-->
<h3 align=center><font color="#FFF700">H</font><font color="#FFEF00">i</font><font color="#FFE700">g</font><font color="#FFDF00">h</font><font color="#FFD700"> </font><font color="#FFCF00">R</font><font color="#FFC700">e</font><font color="#FFBF00">s</font><font color="#FFB700">o</font><font color="#FFAF00">l</font><font color="#FFA700">u</font><font color="#FF9F00">t</font><font color="#FF9700">i</font><font color="#FF8F00">o</font><font color="#FF8700">n</font><font color="#FF7F00"> </font><font color="#FF7700">T</font><font color="#FF6F00">i</font><font color="#FF6700">m</font><font color="#FF5F00">i</font><font color="#FF5700">n</font><font color="#FF4F00">g</font><font color="#FF4700"> </font><font color="#FF3F00">I</font><font color="#FF3700">n</font><font color="#FF2F00"> </font><font color="#FF2700">G</font><font color="#FF1F00">a</font><font color="#FF1700">m</font><font color="#FF0F00">e</font><font color="#FF0700">s</font><br><font size=-2>By: <a href="mailto:dhonn@usa.net">Dhonn Lushine</a></font></h3>
<!--End Title-->

<H3><FONT COLOR=YELLOW><I>Games Without Timers</I></FONT></H3>

<P>Back in the early days, games did not use a timer to control game play  As a result, those games are too fast for our PC's of the late 90's.  These games' reference of time is not in sync with the reference of time of our PCs today.  You have probably noticed that games like Duke Nukem (the 2D one) came with several versions for different processor speeds (not really processor types).  Do this for different processor types, not processor speeds.  Why should you bother writing two versions of the same game for a low-end Pentium 90 and a high-end Pentium 200?  For the processor is the same, the instructions are the same; only the speed is different.  On the other hand, your game might benefit if you write different versions of it for different generations of processors, such as the 486, Pentium, MMX, and Pentium II, all of which are still common (these are the processors of the 90's, for those of you reading this in the years beyond 2000).  I have seen demos that had a frame cap; they had a timer that lagged them to 18.2 fps on all processors.  The slow processors would just try to make the cut.  I've seen worse in code where people use FOR loop delays (which run normally on the authors PC, but run too fast or too slow for everyone else).

<H3><FONT COLOR=YELLOW><I>Games With Timers</I></FONT></H3>
<p>If you play a game that is really choppy or really smooth, it is likely to use a timer.  The processor speed for which the game is balanced between smooth and choppy is usually the recommended processor speed for the game.  These games either skip frames if they're lagging or redraw frames if they're moving too quickly.  Games that do this might be able to run 1000 fps but will run as if they can only achieve 30 fps but really smooth, while on a slower PC it will look as it is 30 fps but is really choppy and runs at 10 fps.  These games can be played on PCs of any speed, and will run at the same units per second as on the next.

<H3><FONT COLOR=YELLOW><I>So how do you do this?</I></FONT></H3>
<P>Well, you must find the most accurate timer on you PC.  You want a timer that updates no faster than every millisecond.  x86 PCs have a nice hardware clock that runs at 1193180hz (1.13198 MHz), microsecond resolution.  Find it and use it.  Once you have a timer, you need to make it a floating-point precision timer (let's call it "ftime()"); use doubles for this, since most timers use 64-bit integers.  For making a floating-point precision timer, just get the timer's value and divide by its rate:</P>

<BLOCKQUOTE>
<PRE><FONT SIZE=2 COLOR=RED>
	double ftime(void)
	{
	   return super_fast_clock()/the_rate_of_the_clock;
	}
</FONT></PRE>
</BLOCKQUOTE>

<P>We would move all objects based on how each frame performs, the frame time. To get the frame time you begin by getting the time that the frame starts.  You then get the time at which the frame ends, and subtract, as follows:</P>

<BLOCKQUOTE>
<PRE><FONT SIZE=2 COLOR=RED>
	float framestart,frameend,frametime,fps;

	framestart=ftime(); // get the first time

	// game loop
	do
	{
	   do
	   {
	      // get the time till its not equal to start frame time, it should,
	      // never loop at the rate of this timer, but if it does then
	      // it will cap to the frame rate to the rate of this timer which
	      // is 1193180 Hz
	      frameend=ftime();  // get end of frame time
	   } while(frameend==framestart);

	   frametime=frameend-framestart; // find difference to get the frametime
	   framestart=frameend; // make the first time be the next time

	   // the inverse of frame time is the frame rate
	   fps=1.0/frametime; // pretty cool huh
  
	   // other game stuff
	} while(game_is_running);
</FONT></PRE>
</BLOCKQUOTE>

<p>If you added all of the frame times together for 1 second, the resultant value would equal 1.  Declare your movement variables for a game in single-precision floating-point.  You need this precision because the frame time could be as small as 1/1193180.  Declare your units per second variables in floats also to whatever rate as well.  To move your game objects at that rate, you multiply the objects' rates by their units per second motion constant.  Here is what it looks like:</p>

<BLOCKQUOTE>
<PRE><FONT SIZE=2 COLOR=RED>
	players.location_x+=players.x_units_per_second*frametime;
</FONT></PRE>
</BLOCKQUOTE>

<P>Note: No matter how fast your processor is, everything will move at a given number of units per second, because for each second, the sum of frame-times will be one.  Total time is equal to all the frame times added together, they work on a ratio of 1:1.

<p>For flipping sprites you would do the same.  You would have to declare a float variable that keeps track of the current frame.  Also, you would limit the frames drawn per second.</p>

<BLOCKQUOTE>
<PRE><FONT SIZE=2 COLOR=RED>
	sprite.fcurrentframe+=sprite.framespersecond*frametime;
	if(sprite.fcurrentframe&gtsprite.totalframes)
	{
	   int isoverby=sprite.fcurrentframe/sprite.totalframes;
	   sprite.fcurrentframe-=mesprite.totalframes*isoverby;
	}
	sprite.icurrentframe=(int)sprite.fcurrentframe;
	sprite_draw(&sprite);
</FONT></PRE>
</BLOCKQUOTE>

<P>This skips frames if you have a slow PC, and on a fast PC it will run every frame but no more than sprite.framespersecond.

<p>If you wanted to make a delay it would be as easy. I would not recommend adding a delay, but I guess it's good for...nothing.  Well just kidding it would have its uses for like reading a port for x seconds. Here is what it would look like:</p>

<BLOCKQUOTE>
<PRE><FONT SIZE=2 COLOR=RED>
	float start=ftime();
	while(ftime()-start&ltnum_seconds)
	{
	   // you can put code here
	}
</FONT></PRE>
</BLOCKQUOTE>

<p>Remember, everything that moves should be using the frametime.  Also everything that moves should have its own units per second variable.  Now that you have this knowledge, you can create a game that uses real time.  Your game will look and feel professional.</p>

<H4 ALIGN=CENTER>Download: <A HREF="ftimedj.zip">ftimedj.zip (DJGPP Source & EXE)</A> or <A HREF="ftimevc.zip">ftimevc.zip (VC++ Source & EXE)</A></H4>

<!--Bottom Navigation-->
<A NAME="bottom"></A>
<!--End Bottom Navigation-->
</STRONG>
</FONT>
<!--End Body-->
<!--Bottom-->
<BR>
<IMG SRC="gradbar.jpg">
<BR>
<FONT SIZE=2 COLOR=#8B8B8B FACE=Helvetica>
<I><font color="#FBFBFB">T</font><font color="#F7F7F7">h</font><font color="#F3F3F3">e</font><font color="#EFEFEF"> </font><font color="#EBEBEB">G</font><font color="#E7E7E7">a</font><font color="#E3E3E3">m</font><font color="#DFDFDF">e</font><font color="#DBDBDB"> </font><font color="#D7D7D7">P</font><font color="#D3D3D3">r</font><font color="#CFCFCF">o</font><font color="#CBCBCB">g</font><font color="#C7C7C7">r</font><font color="#C3C3C3">a</font><font color="#BFBFBF">m</font><font color="#BBBBBB">m</font><font color="#B7B7B7">i</font><font color="#B3B3B3">n</font><font color="#AFAFAF">g</font><font color="#ABABAB"> </font><font color="#A7A7A7">M</font><font color="#A3A3A3">e</font><font color="#9F9F9F">g</font><font color="#9B9B9B">a</font><font color="#979797">S</font><font color="#939393">i</font><font color="#8F8F8F">t</font><font color="#8B8B8B">e</font> - ©1996-<SCRIPT LANGUAGE="JavaScript">
<!--
myDate = new Date;
if(myDate.getYear() < 100)
{
	printdate = (myDate.getYear() + 1900);
	document.write(printdate);
}
else
{
	printdate = myDate.getYear();
	document.write(printdate);
}
//-->
</SCRIPT> <A HREF="mailto:GPMega@perplexed.com" TARGET="CONTENT">Matt Reiferson</A>.
</I>
</FONT>
<!--End Bottom-->
<!--Footer-->
</BODY>
</HTML>
<!--End Footer-->

















































